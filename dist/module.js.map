{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@grafana/ui\"","webpack:///external \"react\"","webpack:///./module.tsx","webpack:///./components/ImagesPanel.tsx","webpack:///./components/ImagesPanelEditor.tsx","webpack:///./types.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","_ui","_ImagesPanel","_ImagesPanelEditor","_types","plugin","PanelPlugin","ImagesPanel","setDefaults","defaultOptions","setEditor","ImagesPanelEditor","_react","_super","__extends","getColorsBasedOnValue","_a","this","props","options","thresholds","useThreshold","color","forEach","threshold","getColorFromHexRgbOrName","textColor","borderColor","renderItemFromRow","row","indexes","imageSize","textFontSize","labelIndex","thresholdIndex","imageIndex","imageTypeIndex","record","image","label","thresholdValue","imageType","_b","_react2","default","createElement","style","width","margin","padding","border","src","fontSize","render","_this","data","state","series","length","textAlign","lineHeight","height","fields","field","type","items","rows","map","overflow","display","flexWrap","PureComponent","onImageSizeChange","target","setState","onUpdatePanel","onOptionsChange","__assign","onKeyUpImageSize","e","onTextColorChange","onBorderColorChange","onThresholdChange","onUsingThresholdChange","onTextSizeChange","Fragment","PanelOptionsGroup","title","className","FormField","labelWidth","inputWidth","onChange","onBlur","onKeyUp","inputEl","min","max","Switch","checked","ThresholdsEditor","ColorPicker","enableNamedColors"],"mappings":"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","file":"module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","import { PanelPlugin } from '@grafana/ui';\nimport { ImagesPanel } from './components/ImagesPanel';\nimport { ImagesPanelEditor } from './components/ImagesPanelEditor';\nimport { PluginOptions, defaultOptions } from './types';\n\nexport const plugin = new PanelPlugin<PluginOptions>(ImagesPanel)\n\nplugin.setDefaults(defaultOptions)\nplugin.setEditor(ImagesPanelEditor)","import React, { PureComponent } from \"react\";\nimport { PanelProps, getColorFromHexRgbOrName } from \"@grafana/ui\";\nimport { PluginOptions } from '../types';\n\ninterface State {}\ninterface Props extends PanelProps<PluginOptions> {}\n\n/**\n * Define colors for an image item\n * \n * @interface \n */\ninterface ItemColors {\n  textColor: string;\n  borderColor: string;\n}\n\n/**\n * Define indexes of images, labels and threshold values of each row from a data source\n * \n * @interface\n */\ninterface DataIndexes {\n  imageIndex: number;\n  labelIndex: number;\n  thresholdIndex: number;\n  imageTypeIndex: number;\n}\n\n/**\n * The main plugin panel\n * \n * @class\n */\nexport class ImagesPanel extends PureComponent<Props, State> {\n  /**\n   * Define a set of colors for labels and borders based on specified threshold and value for an item\n   * @param {number} value A number value\n   * @returns {ItemColors}\n   */\n  getColorsBasedOnValue (value: number): ItemColors {\n    const { thresholds, useThreshold } = this.props.options;\n    let color: string = '';\n    if (!useThreshold) {\n      return {\n        textColor: getColorFromHexRgbOrName(this.props.options.textColor),\n        borderColor: getColorFromHexRgbOrName(this.props.options.borderColor)\n      }\n    }\n    thresholds.forEach(threshold => {\n      if (value > threshold.value) color = getColorFromHexRgbOrName(threshold.color)\n    })\n    return {\n      textColor: color,\n      borderColor: color\n    }\n  }\n\n  /**\n   * Render each row\n   * \n   * @param row A row from the data received from a data source\n   * @param indexes An index definition\n   */\n  renderItemFromRow(row, indexes: DataIndexes) {\n    const { imageSize, textFontSize } = this.props.options\n    const { labelIndex, thresholdIndex, imageIndex, imageTypeIndex } = indexes\n    const record = {\n      image: row[imageIndex],\n      label: null,\n      thresholdValue: 0,\n      imageType: 'bmp'\n    }\n    if (labelIndex >= 0) record.label = row[labelIndex]\n    if (thresholdIndex >= 0) record.thresholdValue = row[thresholdIndex]\n    if (imageTypeIndex >= 0) record.imageType = row[imageTypeIndex]\n    const { textColor, borderColor } = this.getColorsBasedOnValue(record.thresholdValue)\n    return (\n      <div key={record.image} style={{width: (imageSize)+'px', margin: '0px 10px 10px 0px', padding: '4px', border: '3px solid', borderColor }}>\n        <img src={`data:image/${record.imageType};base64,${record.image}`} style={{width: (imageSize-14)+'px'}}/>\n        {record.label ? <div style={{ color: textColor, fontSize: textFontSize+'px'}}>{record.label}</div>: ''}\n      </div>\n    )\n  }\n\n  /**\n   * Render the plugin\n   */\n  render() {\n    const isThereData = this.props.data.state === 'Done' && this.props.data.series.length > 0\n    \n    if (!isThereData) {\n      return (\n        <div style={{ textAlign: 'center', lineHeight: this.props.height+'px' }}>There is no data for this panel</div>\n      )\n    }\n    \n    const indexes: DataIndexes = {\n      imageIndex: -1,\n      labelIndex: -1,\n      thresholdIndex: -1,\n      imageTypeIndex: -1\n    }\n    for (let i: number = 0; i < this.props.data.series[0].fields.length; ++i) {\n      const field = this.props.data.series[0].fields[i]\n      if (field.name === 'image' && field.type === 'string') {\n        indexes.imageIndex = i\n      } else if (field.name === 'label' && (field.type === 'string' || field.type === 'number')) {\n        indexes.labelIndex = i\n      } else if (field.name === 'value' && field.type === 'number') {\n        indexes.thresholdIndex = i\n      } else if (field.name === 'imagetype' && field.type === 'string') {\n        indexes.imageTypeIndex = i\n      }\n    }\n\n    if (indexes.imageIndex === -1) {\n      return (\n        <div style={{ textAlign: 'center', lineHeight: this.props.height+'px' }}>There are no images in the data</div>\n      )\n    }\n\n    const items = this.props.data.series[0].rows.map(row => this.renderItemFromRow(row, indexes))\n\n    return (\n      <div style={{ overflow: 'scroll', width: this.props.width, height: this.props.height }}>\n        <div style={{display: 'flex', flexWrap: 'wrap'}}>\n          {items}\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { FormField, PanelOptionsGroup, PanelEditorProps, ColorPicker, ThresholdsEditor, Switch } from '@grafana/ui';\nimport { PluginOptions } from '../types';\nimport { Threshold } from '@grafana/data'\n\ninterface State {\n  imageSize: number;\n  textColor: string;\n  borderColor: string;\n  textFontSize: number;\n  thresholds: Threshold[];\n  useThreshold: boolean;\n}\n\nexport class ImagesPanelEditor extends PureComponent<PanelEditorProps<PluginOptions>, State> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      imageSize: props.options.imageSize,\n      textColor: props.options.textColor,\n      borderColor: props.options.borderColor,\n      textFontSize: props.options.textFontSize,\n      thresholds: props.options.thresholds,\n      useThreshold: props.options.useThreshold\n    }\n  }\n\n  onImageSizeChange = ({ target }) => this.setState({ imageSize: target.value })\n  onUpdatePanel = () => this.props.onOptionsChange({\n    ...this.props.options,\n    imageSize: this.state.imageSize,\n    textColor: this.state.textColor,\n    borderColor: this.state.borderColor,\n    textFontSize: this.state.textFontSize,\n    thresholds: this.state.thresholds,\n    useThreshold: this.state.useThreshold\n  })\n  onKeyUpImageSize = (e) => e.key === 'Enter' && this.onUpdatePanel()\n  onTextColorChange = (textColor) => this.setState({ textColor }, () => this.onUpdatePanel())\n  onBorderColorChange = (borderColor) => { this.setState({ borderColor }, () => this.onUpdatePanel()); }\n  onThresholdChange = (thresholds) => this.setState({ thresholds }, () => this.onUpdatePanel())\n  onUsingThresholdChange = () => this.setState({ useThreshold: !this.state.useThreshold }, () => this.onUpdatePanel())\n  onTextSizeChange = ({ target }) => this.setState({ textFontSize: target.value }, () => this.onUpdatePanel())\n\n  render() {\n    const labelWidth = 10;\n    return (\n      <>\n        <PanelOptionsGroup title=\"Images options\">\n          <div className=\"gf-form\">\n            <FormField\n              label=\"Image size\"\n              labelWidth={labelWidth}\n              inputWidth={25}\n              value={this.state.imageSize}\n              onChange={this.onImageSizeChange}\n              onBlur={this.onUpdatePanel}\n              onKeyUp={this.onKeyUpImageSize}\n              />\n          </div>\n          <div className=\"gf-form\">\n            <FormField\n              label={`Text font size (${this.state.textFontSize})`}\n              labelWidth={labelWidth}\n              inputWidth={25}\n              inputEl={\n                <input type=\"range\" value={this.state.textFontSize} onChange={this.onTextSizeChange} min={8} max={28}/>\n              }\n              />\n          </div>\n          <div className=\"gf-form\">\n            <Switch\n              label=\"Use threshold for border color\"\n              checked={this.state.useThreshold}\n              onChange={this.onUsingThresholdChange}\n              />    \n          </div>\n          {\n            this.state.useThreshold && (\n            <div className=\"gf-form\">\n              <ThresholdsEditor\n                thresholds={this.state.thresholds}\n                onChange={this.onThresholdChange}\n              />\n            </div>\n            )\n          }\n          {\n            !this.state.useThreshold && (\n              <>\n                <div className=\"gf-form\">\n                  <FormField\n                    label=\"Border color\"\n                    labelWidth={labelWidth}\n                    inputWidth={25}\n                    inputEl={\n                      <ColorPicker\n                        color={this.state.borderColor}\n                        onChange={this.onBorderColorChange}\n                        enableNamedColors={true}\n                      />\n                    }\n                    />\n                </div>\n                <div className=\"gf-form\">\n                  <FormField\n                    label=\"Text color\"\n                    labelWidth={labelWidth}\n                    inputWidth={25}\n                    inputEl={\n                      <ColorPicker\n                        color={this.state.textColor}\n                        onChange={this.onTextColorChange}\n                      />\n                    }\n                    />\n                </div>\n              </>\n            )\n          }\n        </PanelOptionsGroup>\n      </>\n    )\n  }\n}","import { Threshold } from '@grafana/data';\n\nexport interface PluginOptions {\n  imageSize: number;\n  textColor: string;\n  borderColor: string;\n  textFontSize: number;\n  thresholds: Threshold[];\n  useThreshold: boolean;\n}\n\nexport const defaultOptions: PluginOptions = {\n  imageSize: 80,\n  textColor: '#ffffff',\n  borderColor: '#ffffff',\n  textFontSize: 14,\n  thresholds: [],\n  useThreshold: false\n}"],"sourceRoot":""}